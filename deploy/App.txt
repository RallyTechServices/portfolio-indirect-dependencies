<!DOCTYPE html>
<html>
<head>
    <title>Portfolio Indirect Dependencies</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Thu Aug 18 2016 13:23:41 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Aug 18 2016 13:23:41 GMT-0600 (MDT)";
        var BUILDER = "kcorkan";
        var CHECKSUM = 14051565695;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});


Ext.define('CArABU.technicalservices.PredecessorTemplate', {
        extend: 'Ext.XTemplate',

        /**
         * @cfg {Boolean}
         * Whether to show the icon next to the formatted id
         */
        showIcon: true,

        /**
         * @cfg {Boolean}
         * Render the FormattedID as plain text instead of a hyperlink to the artifact.
         */
        renderIdAsText: false,

        constructor: function (config) {
           // this.scheduleStates = config.scheduleStates;
            return this.callParent([
                '<tpl if="values.length!=0"><table class="predecessors-table"><thead><th class="predecessors-header">Name</th><th class="predecessors-header">Schedule State</th><th class="predecessors-header">Team</th><th class="predecessors-header">Iteration</th><th class="predecessors-header">Predecessors</th></thead>',
                '<tpl for="."><tr>',
                '<td><span class="formatted-id-template">{[this.createIdValue(values)]}</span>: {Name}</td>',
                '<td><div aria-label="Edit Schedule State: {ScheduleState}"',
                    ' class="schedule-state-wrapper {[this._addClsIfEditable(values)]}" style="width: 100%">',
                    '{[this.renderStates(values)]}',
                    '</div></td>',
                '<td>{[this.getReferenceAttribute(values, "Project", "Name")]}</td>',
                '<td>{[this.getReferenceAttribute(values, "Iteration","Name","Unscheduled")]}</td>',
                '<td><tpl if="this._getDependenciesCount(values) &gt; 0">',
                '<a onclick="{[this._getOnClick(values)]}">',
                    '<span class="predecessorsandsuccessors-cnt">{[this._getDependenciesCount(values)]}</span>',
                    '</a>',
                '</tpl></td>',
                '</tr></tpl></table></tpl>' +
                '<tpl if="values.length == 0">',
                '<div class="predecessor">Predecessors exist for this story, but are not within the viewable permissions of the current user</div>',
                '</tpl>',
                config
            ]);


        },
        _addClsIfEditable: function(recordData) {
            return recordData.updatable ?  'field-editable' : '';
        },
        _getDependenciesCount: function (recordData) {
            return recordData.Predecessors.Count;
        },
        _getOnClick: function(recordData) {
            return 'Rally.ui.renderer.template.status.PredecessorsAndSuccessorsStatusTemplate.onClick(event, \'' + recordData._ref + '\'); return false;';
        },
    renderStates: function(recordData) {
        var states = this.scheduleStates;
        var stateUsed = true;
        var returnVal = [];
        var currentState = recordData['ScheduleState'];
        var blockWidth = Math.floor((85/(states.length))-3);

        Ext.each(states, function(state, index) {
            //don't add spacer at the front
            if(index !== 0) {
                returnVal.push('<span class="schedule-state-spacer"></span>');
            }

            //render an individual state block
            returnVal.push('<div state-data="' + state + '" class="schedule-state');
            returnVal.push(this._getClassFromState(recordData.Blocked, recordData.Ready));

            if (stateUsed) {
                returnVal.push(' before-state');
            }

            if (state === currentState) {
                var symbolState = this._getSymbolState(recordData, state);
                returnVal.push(' current-state');
                if (recordData.Blocked) {
                    returnVal.push('" style="width:' + blockWidth*2 + '%">');
                    returnVal.push('<div class="hexagon"></div>');
                    returnVal.push('<div class="state-name">');
                    returnVal.push(symbolState + '</div></div>');
                } else {
                    returnVal.push('" style="width:' + blockWidth*2 + '%">&nbsp;' + symbolState + '&nbsp;</div>');
                }
            } else {
                returnVal.push(' clickable-state');
                returnVal.push('" style="width:' + blockWidth + '%">&nbsp;</div>');
            }

            //flip the switch so remaining states are gray
            if(state === currentState) {
                stateUsed = false;
            }
        }, this);

        if(this.showTrigger){
            returnVal.push('<div class="editor-trigger icon-chevron-down"></div>');
        }

        return returnVal.join('');
    },

    _isCreate: function (recordData) {
        return recordData.VersionId === "1" && recordData.modified && !recordData.modified.ScheduleState;
    },

    _getSymbolState: function(recordData, state) {
        var symbolState;
        if (recordData.ScheduleStatePrefix) {
            if (!recordData.isDirty || this._isCreate(recordData)) {
                symbolState = recordData.ScheduleStatePrefix;
            }  else {
                symbolState = '';
            }
        } else {
            symbolState = state === 'In-Progress' ? 'P' : state.charAt(0);
        }
        return symbolState;
    },

    _getClassFromState: function(blocked, ready){
        var className = '';
        if (blocked){
            className += ' blocked-state';
        } else if (ready) {
            className += ' ready-state';
        }

        return className;
    },

    getReferenceAttribute: function(data, field, attribute, defaultValue){
            if (!defaultValue){
                defaultValue = '';
            }
            return data[field] && data[field][attribute] || defaultValue;
        },
        createIdValue: function (data) {
            if (data.Recycled || this.renderIdAsText) {
                return this.createTextValue(data);
            } else {
                return this.createDetailLink(data);
            }
        },

        createTextValue: function (data) {
            return this.createIcon(data) + Ext.create('Rally.ui.renderer.template.StringTemplate', {
                    fieldName: 'FormattedID'
                }).apply(data);
        },

        createDetailLink: function (data) {
            var options = {
                record: data,
                text: this.createIcon(data) + (data.FormattedID || ''),
                showHover: !!this.showHover
            };
            var ref = Rally.util.Ref.getRelativeUri(data),
                type = Rally.util.Ref.getTypeFromRef(ref);

            if (type === 'testset') {
                if (ref) {
                    options.onclick = 'Rally.nav.Manager.edit(\'' + ref + '\'); return false;';
                }
            } else if(type === 'milestone') {
                var projectToNavigateTo = data.TargetProject || data.context.getProject();
                options.projectOid = Rally.util.Ref.getOidFromRef(projectToNavigateTo);
            }

            return Rally.nav.DetailLink.getLink(options);
        },

        createIcon: function (data) {
            if (this.showIcon === false) {
                return '';
            }

            var type = Rally.util.Ref.getTypeFromRef(data);
            var typeName = Rally.util.TypeInfo.normalizeTypeName(type);
            var typeInfo = Rally.util.TypeInfo.getTypeInfoByName(typeName);
            var className = typeInfo && typeInfo.icon;
            var colorAttr = typeName === 'milestone' && data.DisplayColor ? ' style="color: ' + data.DisplayColor + ';"' : '';

            return className ? '<span class="artifact-icon ' + className + '"' +  colorAttr + '></span>' : '';
        }

 });

 Ext.define('CArABU.technicalservices.PredecessorsStatusTemplate', {
        extend: 'Rally.ui.renderer.template.status.StatusTemplate',

        inheritableStatics: {
            onClick: function(event, ref) {
                Rally.ui.renderer.template.status.StatusTemplate.onClick(event, ref, {
                    field: 'PredecessorsAndSuccessors'
                });
            }
        },

        constructor: function(config) {
            this.callParent([
                '<tpl if="this._getDependenciesCount(values) &gt; 0">',
                '<a onclick="{[this._getOnClick(values)]}">',
                '<span class="predecessorsandsuccessors-cnt">{[this._getDependenciesCount(values)]}</span>',
                '</a>',
                '</tpl>'
            ]);

        },

        _getDependenciesCount: function (recordData) {
            return recordData.Predecessors.Count;
        },

        _getOnClick: function(recordData) {
            return 'Rally.ui.renderer.template.status.PredecessorsAndSuccessorsStatusTemplate.onClick(event, \'' + recordData._ref + '\'); return false;';
        }
    });

Ext.define("portfolio-indirect-dependencies", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'selector_box',layout: 'hbox'},
        {xtype:'container',itemId:'display_box'}
    ],

    integrationHeaders : {
        name : "portfolio-indirect-dependencies"
    },

    portfolioItemTypes: ['portfolioitem/feature','portfolioitem/initiative'],

    launch: function() {
        this.initializeApp();
    },
    initializeApp: function(){
        Rally.data.ModelFactory.getModel({
            type: 'HierarchicalRequirement',
            success: function(model) {
                this.scheduleStates = model.getField('ScheduleState').getAllowedStringValues();
                this.initializeComponents();
                //Use the defect model here
            },
            scope: this
        });


    },
    initializeComponents: function(){
        this.getSelectorBox().removeAll();
        this.down('#display_box').removeAll();

        this.getSelectorBox().add({
           xtype: 'rallyartifactsearchcombobox',
            width: 500,
            fieldLabel: 'Portfolio Item',
            labelAlign: 'right',
            storeConfig: {
                models: this.portfolioItemTypes
            },
            listeners: {
               select: this.updateView,
                scope: this
            }

        });
    },
    getSelectorBox: function(){
        return this.down('#selector_box');
    },
    updateView: function(cb){
        this.logger.log('updateView', cb.getValue());

        if (cb.getRecord()){
            this.fetchDescendentsWithDependencies(cb.getRecord().get('_type'), cb.getValue()).then({
                success: this.fetchDependencies,
                failure: this.showErrorNotification,
                scope: this
            });
        }

    },
    showErrorNotification: function(msg){
        Rally.ui.notify.Notifier.showError({message: msg});
    },
    getFeatureName: function(){
        return 'Feature';
    },
    fetchDescendentsWithDependencies: function(type, ref){
        this.logger.log('fetchDescendentsWithDependencies', type, ref);
        var fetch = ['FormattedID','Name',this.getFeatureName(),'Predecessors','ObjectID','Iteration','EndDate','Project'];

        var idx = _.indexOf(this.portfolioItemTypes, type);
        var property = this.getFeatureName();
        if (idx > 0){
            property = property + '.Parent';
        }



        return this.fetchWsapiRecords({
            model: 'HierarchicalRequirement',
            fetch: fetch,
            context: {project: null},
            filters: [{
                property: property,
                value: ref
            },{
                property: 'Predecessors.ObjectID',
                operator: '>',
                value: 0
            }],
            limit: 'Infinity'
        });
    },
    fetchDependencies: function(records){
        this.logger.log('fetchDependencies', records);
        this.down('#display_box').removeAll();
        if (!records || records.length === 0){
            this.down('#display_box').add({
                xtype: 'container',
                html: '<div class="no-data-container"><div class="secondary-message">There are no story predecessors for the selected Portfolio Item.</div></div>'
            });
            return;
        }

        var dependencyHash = {},
            filters = [],
            rootObjectIDs = [];

        Ext.Array.each(records, function(r){
            var recordData = r.getData();
            dependencyHash[recordData.FormattedID] = recordData;
            dependencyHash[recordData.FormattedID]._dependencies = [];

            filters.push({
                property: 'Successors.ObjectID',
                value: recordData.ObjectID
            });
            rootObjectIDs.push(recordData.FormattedID);
        });

        this.dependencyHash = dependencyHash;
        this.rootStories = rootObjectIDs;

        filters = Rally.data.wsapi.Filter.or(filters);

        this.fetchWsapiRecords({
            model: 'HierarchicalRequirement',
            fetch: ['Predecessors', 'ObjectID','FormattedID','Name','Project','ScheduleState','Successors:summary[FormattedID], Iteration'],
            context: { project: null},
            compress: false,
            filters: filters
        }).then({
            success: this.updateDependencyGrid,
            failure: this.showErrorNotification,
            scope: this
        })

    },
    getSuccessorsFromSummary: function(summary){
        var summaryObjs = summary && summary.Successors && summary.Successors.FormattedID;
        if (!summaryObjs){
            return [];
        }
        var objIds = Ext.Object.getKeys(summaryObjs);
        this.logger.log('getSuccessorsFromSummary', summary,objIds);
        return objIds;

    },

    updateDependencyGrid: function(dependencies){
        this.logger.log('updateDependencyGrid', dependencies, this.dependencyHash);


        Ext.Array.each(dependencies, function(d){
            var obj = d.getData();
            obj._dependencies = [];
            this.dependencyHash[obj.FormattedID] = obj;

            var successors = this.getSuccessorsFromSummary(obj.Summary);
            Ext.Array.each(successors, function(s){
                if (this.dependencyHash[s]){
                    this.dependencyHash[s]._dependencies.push(obj);
                } else {
                    //Warning!
                }

            },this);
        }, this );

        this.logger.log('updateDependencyGrid', this.dependencyHash);


        var addDependencyColumns = function(rec, idx, row){
            row['col' + idx] = rec._dependencies || [];
            //row[idx] = rec._dependencies || [];
            Ext.Array.each(row[idx], function(r){
                row = addDependencyColumns(r, idx+1, row);
            });
            return row;
        }

        var data = [],
            maxCols = 0;
        Ext.Array.each(this.rootStories, function(oid){
            var row = {}, idx = 0;
            console.log('x',this.dependencyHash[oid])
            row.Feature = this.dependencyHash[oid].Feature;
            row.col0 = this.dependencyHash[oid];
            row = addDependencyColumns(this.dependencyHash[oid],1,row);
            data.push(row);
            maxCols = Math.max(Object.keys(row).length, maxCols);
        }, this );
        this.logger.log('data',data,maxCols);

        this.down('#display_box').add({
            xtype: 'rallygrid',
            columnCfgs: this.getColumnCfgs(maxCols),
            store: Ext.create('Rally.data.custom.Store',{
                data: data,
                pageSize: data.length
            }),
            showPagingToolbar: false,
            allowEditing: false,
            showRowActionsColumn: false,
            enableBulkEdit: false
        });
    },

    getColumnCfgs: function(maxCols){
        var states = this.scheduleStates;

        var cols = [{
            dataIndex: 'Feature',
            text: 'Feature',
            flex: 1,
            renderer: function (v, m, r) {
                console.log('v', v);
                m.tdCls = 'successor';
                var tpl = Ext.create('Rally.ui.renderer.template.FormattedIDTemplate');
                return Ext.String.format("{0}: {1}", tpl.apply(v), v.Name);
            }
        },{
            dataIndex: 'col0',
            text: 'Feature Story (Team)',
            flex: 1,
            renderer: function(v,m,r){
                console.log('v',v);
                m.tdCls = 'successor';
                var tpl = Ext.create('Rally.ui.renderer.template.FormattedIDTemplate');
                return Ext.String.format("{0}: {1}", tpl.apply(v), v.Name);
            }
        }];
        for (var i=1; i<maxCols-1; i++){
            cols.push({
                dataIndex: 'col' + i,
                flex: 3,
                text: 'Predecessors',
                renderer: function(v,m,r){
                    var tpl = Ext.create('CArABU.technicalservices.PredecessorTemplate',{
                        scheduleStates: states
                    });
                    return tpl.apply(v);
                }
            });
        }
        return cols;

    },

    fetchWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('fetchWsapiRecords', config);
        Ext.create('Rally.data.wsapi.Store',config).load({
            callback: function(records, operation){
                this.logger.log('fetchWsapiRecords callback', records, operation);
                if (operation.wasSuccessful()){
                    deferred.resolve(records);
                } else {
                    deferred.reject('Error fetching records: ' + operation.error.errors.join(','));
                }
            },
            scope: this
        });

        return deferred;
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('portfolio-indirect-dependencies', {
                   name: 'Portfolio Indirect Dependencies'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.predecessors-table .predecessorsandsuccessors-cnt {
    color: #337ec6;
    font-family: NotoSansBold,Helvetica,Arial;
    font-weight: normal;
    font-size: 12px;
    cursor: pointer;
}

.predecessors-table {
    width: 100%;
}

.predecessors-table .td {
    width: 20%;
}

.predecessors-table .predecessors-header {
    color: #222;
    cursor: default;
    font-family: ProximaNovaSemiBold,Helvetica,Arial;
    font-size: 10px;
    font-weight: normal;
    line-height: 12px;
    margin-right: 0;
    overflow: hidden;
    padding-top: 3px!important;
    padding-bottom: 3px!important;
    text-transform: uppercase;
    text-overflow: clip;
}
.successor {
    vertical-align: middle!important;
}

.predecessor {
    color: #888888;
    cursor: default;
    font-family: ProximaNovaSemiBold,Helvetica,Arial;
    font-size: 11px;
    font-weight: normal;
    line-height: 12px;
    margin-right: 0;
    overflow: hidden;
    padding-top: 3px!important;
    padding-bottom: 3px!important;
    text-transform: uppercase;
    text-overflow: clip;
}
    </style>

</head>
<body></body>
</html>